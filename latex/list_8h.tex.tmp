\hypertarget{list_8h}{}\section{list.\+h File Reference}
\label{list_8h}\index{list.\+h@{list.\+h}}
{\ttfamily \#include \char`\"{}std.\+h\char`\"{}}\newline
Include dependency graph for list.\+h\+:
% FIG 0
\subsection*{Classes}
\begin{DoxyCompactItemize}
\item 
struct \hyperlink{structlist}{list}
\begin{DoxyCompactList}\small\item\em List struct used to reprecent type-\/less lists. \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
int \hyperlink{list_8h_ac5bb975f87a5a7a77cf500c5df217537}{list\+\_\+add} (struct \hyperlink{structlist}{list} $\ast$$\ast$\hyperlink{structlist}{list}, void $\ast$value)
\begin{DoxyCompactList}\small\item\em This function adds a new node, to already exsisting list, containing the given value. \end{DoxyCompactList}\item 
void $\ast$$\ast$ \hyperlink{list_8h_a737868ee9720fc3892f3f953ecaf7c04}{list\+\_\+get} (struct \hyperlink{structlist}{list} $\ast$\hyperlink{structlist}{list}, const size\+\_\+t index)
\begin{DoxyCompactList}\small\item\em Get an element from the list by index. \end{DoxyCompactList}\item 
void $\ast$ \hyperlink{list_8h_a595c069fea9357b527a5294d08092d3e}{list\+\_\+remove} (struct \hyperlink{structlist}{list} $\ast$$\ast$\hyperlink{structlist}{list}, const size\+\_\+t index)
\begin{DoxyCompactList}\small\item\em Remove an element fron the list by index. \end{DoxyCompactList}\item 
int \hyperlink{list_8h_a747b229f0283636ee9a3847607054bb4}{list\+\_\+join} (struct \hyperlink{structlist}{list} $\ast$\hyperlink{structlist}{list}, int($\ast$print)(F\+I\+LE $\ast$stream, const void $\ast$value), F\+I\+LE $\ast$stream, const char $\ast$seperator)
\begin{DoxyCompactList}\small\item\em Print the list. \end{DoxyCompactList}\item 
int \hyperlink{list_8h_ac0cbba499dc0e260c941b7951a69d410}{list\+\_\+reverse} (struct \hyperlink{structlist}{list} $\ast$\hyperlink{structlist}{list})
\begin{DoxyCompactList}\small\item\em Reverse the list. \end{DoxyCompactList}\end{DoxyCompactItemize}


\subsection{Function Documentation}
\mbox{\Hypertarget{list_8h_ac5bb975f87a5a7a77cf500c5df217537}\label{list_8h_ac5bb975f87a5a7a77cf500c5df217537}} 
\index{list.\+h@{list.\+h}!list\+\_\+add@{list\+\_\+add}}
\index{list\+\_\+add@{list\+\_\+add}!list.\+h@{list.\+h}}
\subsubsection{\texorpdfstring{list\+\_\+add()}{list\_add()}}
{\footnotesize\ttfamily int list\+\_\+add (\begin{DoxyParamCaption}\item[{struct \hyperlink{structlist}{list} $\ast$$\ast$}]{list,  }\item[{void $\ast$}]{value }\end{DoxyParamCaption})}



This function adds a new node, to already exsisting list, containing the given value. 


\begin{DoxyParams}{Parameters}
{\em list} & The list which to add an element at the front. \\
\hline
{\em value} & The value which is added to the given list. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{list_8h_a737868ee9720fc3892f3f953ecaf7c04}\label{list_8h_a737868ee9720fc3892f3f953ecaf7c04}} 
\index{list.\+h@{list.\+h}!list\+\_\+get@{list\+\_\+get}}
\index{list\+\_\+get@{list\+\_\+get}!list.\+h@{list.\+h}}
\subsubsection{\texorpdfstring{list\+\_\+get()}{list\_get()}}
{\footnotesize\ttfamily void$\ast$$\ast$ list\+\_\+get (\begin{DoxyParamCaption}\item[{struct \hyperlink{structlist}{list} $\ast$}]{list,  }\item[{const size\+\_\+t}]{index }\end{DoxyParamCaption})}



Get an element from the list by index. 

This function, gets a value from the given list, should the given index be bigger then the list, it will return N\+U\+LL. 
\begin{DoxyParams}{Parameters}
{\em list} & The list, from which to retrive the value. \\
\hline
{\em index} & The index at which the value supposedly exists. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{list_8h_a747b229f0283636ee9a3847607054bb4}\label{list_8h_a747b229f0283636ee9a3847607054bb4}} 
\index{list.\+h@{list.\+h}!list\+\_\+join@{list\+\_\+join}}
\index{list\+\_\+join@{list\+\_\+join}!list.\+h@{list.\+h}}
\subsubsection{\texorpdfstring{list\+\_\+join()}{list\_join()}}
{\footnotesize\ttfamily int list\+\_\+join (\begin{DoxyParamCaption}\item[{struct \hyperlink{structlist}{list} $\ast$}]{list,  }\item[{int($\ast$)(F\+I\+LE $\ast$stream, const void $\ast$value)}]{print,  }\item[{F\+I\+LE $\ast$}]{stream,  }\item[{const char $\ast$}]{seperator }\end{DoxyParamCaption})}



Print the list. 

This function, prints the given list, to the given stream, vi the given callback function and seperator. 
\begin{DoxyParams}{Parameters}
{\em list} & The list which to print. \\
\hline
{\em print} & The callback, which is used to print the given values from the list. \\
\hline
{\em stream} & The file stream, which the the function prints too. \\
\hline
{\em seperator} & The seperator, the string which notes the seperation, between individual list nodes. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{list_8h_a595c069fea9357b527a5294d08092d3e}\label{list_8h_a595c069fea9357b527a5294d08092d3e}} 
\index{list.\+h@{list.\+h}!list\+\_\+remove@{list\+\_\+remove}}
\index{list\+\_\+remove@{list\+\_\+remove}!list.\+h@{list.\+h}}
\subsubsection{\texorpdfstring{list\+\_\+remove()}{list\_remove()}}
{\footnotesize\ttfamily void $\ast$ list\+\_\+remove (\begin{DoxyParamCaption}\item[{struct \hyperlink{structlist}{list} $\ast$$\ast$}]{list,  }\item[{const size\+\_\+t}]{index }\end{DoxyParamCaption})}



Remove an element fron the list by index. 

This function, removes an element by index, from the list and returns its contained value. Should the given index be larger the then the list, return N\+U\+LL. 
\begin{DoxyParams}{Parameters}
{\em list} & The list from which, the value is to be removed. \\
\hline
{\em index} & The index where the value supposedly exists. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{list_8h_ac0cbba499dc0e260c941b7951a69d410}\label{list_8h_ac0cbba499dc0e260c941b7951a69d410}} 
\index{list.\+h@{list.\+h}!list\+\_\+reverse@{list\+\_\+reverse}}
\index{list\+\_\+reverse@{list\+\_\+reverse}!list.\+h@{list.\+h}}
\subsubsection{\texorpdfstring{list\+\_\+reverse()}{list\_reverse()}}
{\footnotesize\ttfamily int list\+\_\+reverse (\begin{DoxyParamCaption}\item[{struct \hyperlink{structlist}{list} $\ast$}]{list }\end{DoxyParamCaption})}



Reverse the list. 


\begin{DoxyParams}{Parameters}
{\em list} & The list to be Reversed. \\
\hline
\end{DoxyParams}
